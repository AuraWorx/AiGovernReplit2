# ---- Base Stage ----
# Use a specific Node.js version matching your development/production environment
FROM node:20-alpine AS base
WORKDIR /app
# Set NODE_ENV early
ENV NODE_ENV=production

# Copy package files
COPY package.json package-lock.json* ./

# ---- Dependencies Stage ----
# Install ALL dependencies needed for building server + running migrations/seeds if done in build
FROM base AS deps
RUN npm ci

# ---- Builder Stage ----
# Build the server application
FROM deps AS builder
# Copy all source code
COPY . .
# Generate Prisma client if used (example, remove if not using Prisma)
# RUN npx prisma generate
# Build the server code (TypeScript -> JavaScript)
RUN npm run build:server

# ---- Production Stage ----
# Start from a clean base image
FROM base AS production
WORKDIR /app

# Install ONLY production dependencies
COPY package.json package-lock.json* ./
RUN npm ci --omit=dev --ignore-scripts

# Copy necessary built artifacts and runtime files from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
# Copy shared directory if it contains runtime code/types needed by the built server
COPY --from=builder /app/shared ./shared
# Copy migration files if migrations are run from within the container (less common for ECS)
# COPY --from=builder /app/db/migrations ./db/migrations

# Expose the port the application runs on
EXPOSE 5000

# Healthcheck (Optional but recommended for ECS)
# Checks if the API health endpoint is responding correctly. Adjust path/port if needed.
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:5000/api/health || exit 1

# Default command to run the application
# Uses the 'start' script defined in package.json (which should be `node dist/index.js`)
CMD ["npm", "start"]
